name: IntelliFish WebGL Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_STORAGE_ACCOUNT: ${{ vars.AZURE_STORAGE_ACCOUNT }}
  CONTAINER_NAME: ${{ vars.AZURE_STORAGE_CONTAINER_NAME }}
  AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}
  UNITY_VERSION: '2021.3.34f1'
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0

    - name: Cache Unity Library
      uses: actions/cache@v3
      with:
        path: Library
        key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-

    - name: Setup Unity
      uses: game-ci/unity-setup@v3
      with:
        unity-version: ${{ env.UNITY_VERSION }}

    - name: Build Unity WebGL
      uses: game-ci/unity-builder@v3
      with:
        unity-version: ${{ env.UNITY_VERSION }}
        target-platform: WebGL
        build-name: IntelliFish-WebGL
        builds-path: build

    - name: Prepare build artifacts
      run: |
        # Set variables
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        BUILD_NAME="intellifish-webgl-$TIMESTAMP"
        
        echo "Preparing build artifacts..."
        
        # Create a directory for the build
        mkdir -p $BUILD_NAME
        
        # Copy the WebGL build files
        cp -r build/WebGL/* $BUILD_NAME/
        
        # Create build info file
        cat > $BUILD_NAME/build-info.txt << EOF
        Build Name: $BUILD_NAME
        Build Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
        Git Commit: ${{ github.sha }}
        Git Branch: ${{ github.ref_name }}
        Unity Version: ${{ env.UNITY_VERSION }}
        Workflow: ${{ github.workflow }}
        EOF
        
        tar -czf $BUILD_NAME.tar.gz $BUILD_NAME
        
        echo "Build artifacts:"
        ls -la
        echo "Archive contents:"
        tar -tzf $BUILD_NAME.tar.gz | head -10

    - name: Setup Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version

    - name: Upload WebGL build to Azure Storage
      run: |
        # Find the latest build file
        BUILD_FILE=$(ls intellifish-webgl-*.tar.gz | head -n 1)
        
        if [ -z "$BUILD_FILE" ]; then
          echo "Error: No build file found!"
          exit 1
        fi
        
        echo "Uploading $BUILD_FILE to Azure Storage..."
        
        # Upload to Azure Blob Storage
        az storage blob upload \
          --account-name "$AZURE_STORAGE_ACCOUNT" \
          --account-key "$AZURE_STORAGE_ACCOUNT_KEY" \
          --container-name "$CONTAINER_NAME" \
          --name "$BUILD_FILE" \
          --file "$BUILD_FILE" \
          --overwrite
        
        echo "Upload completed successfully."

    - name: Create deployment summary
      run: |
        BUILD_FILE=$(ls intellifish-webgl-*.tar.gz | head -n 1)
        DEPLOYMENT_INFO="deployment-info.md"
        
        # Create deployment information
        cat > $DEPLOYMENT_INFO << EOF

        - **Build File:** $BUILD_FILE
        - **Deployment Date:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")
        - **Git Commit:** ${{ github.sha }}
        - **Git Branch:** ${{ github.ref_name }}
        - **Unity Version:** ${{ env.UNITY_VERSION }}

        - **Storage Account:** $AZURE_STORAGE_ACCOUNT
        - **Container:** $CONTAINER_NAME


        EOF
        
        cat $DEPLOYMENT_INFO

    - name: Upload build artifact to workflow
      uses: actions/upload-artifact@v3
      with:
        name: webgl-build
        path: intellifish-webgl-*.tar.gz

  test-build:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: webgl-build

    - name: Verify build integrity
      run: |
        BUILD_FILE=$(ls intellifish-webgl-*.tar.gz | head -n 1)
        
        if [ -z "$BUILD_FILE" ]; then
          echo "Error: No build file found!"
          exit 1
        fi
        
        echo "Verifying build: $BUILD_FILE"
        
        if tar -tzf "$BUILD_FILE" > /dev/null 2>&1; then
          echo "✓ Build archive is valid"
          
          if tar -tzf "$BUILD_FILE" | grep -q "index.html"; then
            echo "✓ index.html found in build"
          else
            echo "✗ index.html missing from build"
            exit 1
          fi
          
          FILE_COUNT=$(tar -tzf "$BUILD_FILE" | wc -l)
          echo "✓ Build contains $FILE_COUNT files"
          
        else
          echo "✗ Build archive is corrupt"
          exit 1
        fi
        
        echo "Build verification completed successfully."