name: IntelliFish WebGL Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_STORAGE_ACCOUNT: ${{ vars.AZURE_STORAGE_ACCOUNT }}
  CONTAINER_NAME: ${{ vars.AZURE_STORAGE_CONTAINER_NAME }}
  AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Check Unity project structure
      run: |
        echo "Checking Unity project structure..."
        if [ -d "Assets" ] && [ -d "ProjectSettings" ]; then
          echo "✓ Valid Unity project structure found"
          echo "Project contains:"
          ls -la
          echo "Assets directory contains:"
          ls -la Assets/ || echo "No Assets directory"
          echo "ProjectSettings directory contains:"
          ls -la ProjectSettings/ || echo "No ProjectSettings directory"
        else
          echo "✗ Not a valid Unity project structure"
          echo "Current directory contents:"
          ls -la
          exit 1
        fi

    - name: Create Unity build script
      run: |
        # Create a build script for Unity
        cat > BuildScript.cs << 'EOF'
        using System;
        using System.IO;
        using System.Linq;
        using UnityEditor;
        using UnityEngine;
        
        public class BuildScript
        {
            public static void BuildWebGL()
            {
                Console.WriteLine("Building WebGL target...");
                
                // Get scenes in build
                var scenes = EditorBuildSettings.scenes
                    .Where(scene => scene.enabled)
                    .Select(scene => scene.path)
                    .ToArray();
                
                if (scenes.Length == 0)
                {
                    Console.WriteLine("No scenes found in build settings. Adding current scene.");
                    scenes = new[] { "Assets/Scenes/SampleScene.unity" };
                }
                
                // Set build options
                BuildOptions options = BuildOptions.None;
                
                // Build player
                BuildPipeline.BuildPlayer(scenes, "WebGL-Dist", BuildTarget.WebGL, options);
                
                Console.WriteLine("Build completed successfully!");
            }
        }
        EOF

    - name: Create WebGL build (simulated)
      run: |
        echo "Creating WebGL build structure..."
        
        # Create a mock build output structure
        mkdir -p WebGL-Dist
        cat > WebGL-Dist/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en-us">
        <head>
            <meta charset="utf-8">
            <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
            <title>IntelliFish Unity WebGL Content</title>
            <script src="TemplateData/UnityProgress.js"></script>
            <script src="Build/WebGL.loader.js"></script>
            <script>
                var unityInstance = UnityLoader.instantiate("unityContainer", "Build/WebGL.json", {onProgress: UnityProgress});
            </script>
        </head>
        <body>
            <div class="webgl-content">
                <div id="unityContainer" style="width: 960px; height: 600px"></div>
            </div>
        </body>
        </html>
        EOF
        
        mkdir -p WebGL-Dist/TemplateData
        cat > WebGL-Dist/TemplateData/UnityProgress.js << 'EOF'
        // Mock Unity progress script
        var UnityProgress = function(gameInstance, progress) {
            if (!gameInstance.Module) return;
            if (!gameInstance.logo) {
                gameInstance.logo = document.createElement("div");
                gameInstance.logo.className = "logo " + gameInstance.Module.splashScreenStyle;
                gameInstance.container.appendChild(gameInstance.logo);
            }
            if (!gameInstance.progress) {    
                gameInstance.progress = document.createElement("div");
                gameInstance.progress.className = "progress " + gameInstance.Module.splashScreenStyle;
                gameInstance.progress.empty = document.createElement("div");
                gameInstance.progress.empty.className = "empty";
                gameInstance.progress.appendChild(gameInstance.progress.empty);
                gameInstance.progress.full = document.createElement("div");
                gameInstance.progress.full.className = "full";
                gameInstance.progress.appendChild(gameInstance.progress.full);
                gameInstance.container.appendChild(gameInstance.progress);
            }
            gameInstance.progress.full.style.width = (100 * progress) + "%";
            gameInstance.progress.empty.style.width = (100 * (1 - progress)) + "%";
            if (progress == 1)
                gameInstance.logo.style.display = gameInstance.progress.style.display = "none";
        };
        EOF
        
        mkdir -p WebGL-Dist/Build
        cat > WebGL-Dist/Build/WebGL.json << 'EOF'
        {
            "companyName": "IntelliFish",
            "productName": "IntelliFish WebGL",
            "productVersion": "1.0",
            "dataUrl": "WebGL.data.unityweb",
            "wasmCodeUrl": "WebGL.wasm.code.unityweb",
            "wasmFrameworkUrl": "WebGL.wasm.framework.unityweb",
            "graphicsAPI": ["WebGL 2.0", "WebGL 1.0"],
            "webglContextAttributes": {"preserveDrawingBuffer": false},
            "backgroundUrl": "TemplateData/background.jpg",
            "splashScreenStyle": "Light",
            "backgroundColor": "#FFFFFF",
            "developmentBuild": false,
            "multithreading": false,
            "unityVersion": "2021.3.34f1"
        }
        EOF
        
        # Create placeholder files that would be generated by Unity
        echo "// Mock loader script" > WebGL-Dist/Build/WebGL.loader.js
        echo "Mock WebAssembly binary" > WebGL-Dist/Build/WebGL.wasm.code.unityweb
        echo "Mock framework binary" > WebGL-Dist/Build/WebGL.wasm.framework.unityweb
        echo "Mock data file" > WebGL-Dist/Build/WebGL.data.unityweb
        echo "Mock background image" > WebGL-Dist/TemplateData/background.jpg
        
        echo "WebGL build structure created successfully"

    - name: Prepare build artifacts
      run: |
        # Set variables
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        BUILD_NAME="intellifish-webgl-$TIMESTAMP"
        
        echo "Preparing build artifacts..."
        
        # Create a directory for the build
        mkdir -p $BUILD_NAME
        
        # Copy the WebGL build files
        cp -r WebGL-Dist/* $BUILD_NAME/
        
        # Create build info file
        cat > $BUILD_NAME/build-info.txt << EOF
        Build Name: $BUILD_NAME
        Build Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
        Git Commit: ${{ github.sha }}
        Git Branch: ${{ github.ref_name }}
        Workflow: ${{ github.workflow }}
        Build Type: WebGL Simulation
        Note: This is a simulated build for testing the pipeline.
        Actual Unity builds require a licensed Unity installation.
        EOF
        
        # Compress the build
        tar -czf $BUILD_NAME.tar.gz $BUILD_NAME
        
        # List files for verification
        echo "Build artifacts:"
        ls -la
        echo "Archive contents:"
        tar -tzf $BUILD_NAME.tar.gz | head -10

    - name: Setup Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version

    - name: Upload WebGL build to Azure Storage
      run: |
        # Find the latest build file
        BUILD_FILE=$(ls intellifish-webgl-*.tar.gz | head -n 1)
        
        if [ -z "$BUILD_FILE" ]; then
          echo "Error: No build file found!"
          exit 1
        fi
        
        echo "Uploading $BUILD_FILE to Azure Storage..."
        
        # Upload to Azure Blob Storage
        az storage blob upload \
          --account-name "$AZURE_STORAGE_ACCOUNT" \
          --account-key "$AZURE_STORAGE_ACCOUNT_KEY" \
          --container-name "$CONTAINER_NAME" \
          --name "$BUILD_FILE" \
          --file "$BUILD_FILE" \
          --overwrite
        
        echo "Upload completed successfully."

    - name: Create deployment summary
      run: |
        BUILD_FILE=$(ls intellifish-webgl-*.tar.gz | head -n 1)
        DEPLOYMENT_INFO="deployment-info.md"
        
        # Create deployment information
        cat > $DEPLOYMENT_INFO << EOF
        # IntelliFish WebGL Deployment Summary

        ## Build Details
        - **Build File:** $BUILD_FILE
        - **Deployment Date:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")
        - **Git Commit:** ${{ github.sha }}
        - **Git Branch:** ${{ github.ref_name }}

        ## Azure Storage Details
        - **Storage Account:** $AZURE_STORAGE_ACCOUNT
        - **Container:** $CONTAINER_NAME

        ## Download URL
        The build can be accessed at:
        \`https://$AZURE_STORAGE_ACCOUNT.blob.core.windows.net/$CONTAINER_NAME/$BUILD_FILE\`

        ## Note
        This is a simulated build for testing the pipeline. Actual Unity builds require a licensed Unity installation.

        EOF
        
        # Display deployment info
        cat $DEPLOYMENT_INFO

    - name: Upload build artifact to workflow
      uses: actions/upload-artifact@v4
      with:
        name: webgl-build
        path: intellifish-webgl-*.tar.gz

  test-build:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: webgl-build
        path: downloaded-build

    - name: Verify build integrity
      run: |
        cd downloaded-build
        
        # Find the build file
        BUILD_FILE=$(ls intellifish-webgl-*.tar.gz | head -n 1)
        
        if [ -z "$BUILD_FILE" ]; then
          echo "Error: No build file found!"
          exit 1
        fi
        
        echo "Verifying build: $BUILD_FILE"
        
        # Check if archive is valid
        if tar -tzf "$BUILD_FILE" > /dev/null 2>&1; then
          echo "✓ Build archive is valid"
          
          # Check for essential files
          if tar -tzf "$BUILD_FILE" | grep -q "index.html"; then
            echo "✓ index.html found in build"
          else
            echo "✗ index.html missing from build"
            exit 1
          fi
          
          # Count files in archive
          FILE_COUNT=$(tar -tzf "$BUILD_FILE" | wc -l)
          echo "✓ Build contains $FILE_COUNT files"
          
          # Extract and verify structure
          tar -xzf "$BUILD_FILE"
          EXTRACTED_DIR=$(ls -d intellifish-webgl-*/ | head -n 1)
          
          if [ -f "$EXTRACTED_DIR/index.html" ]; then
            echo "✓ Extracted build has valid structure"
          else
            echo "✗ Extracted build has invalid structure"
            exit 1
          fi
          
        else
          echo "✗ Build archive is corrupt"
          exit 1
        fi
        
        echo "Build verification completed successfully."